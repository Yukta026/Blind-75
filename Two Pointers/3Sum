3Sum 
-------------------------------------
Time Complexity - O(n^2) + O(n logn)
Space Complexity = O(1)
-------------------------------------
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
        // If consecutive parsed elements same then skip the iteration to avoid duplication
            if(i != 0 && nums[i] == nums[i-1]){
                continue;
            }
            // Adhering to two pointer approach by using j and k pointers
            int j = i+1;
            int k = nums.length -1;
            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == 0){
                    List<Integer> ans = Arrays.asList(nums[i],nums[j],nums[k]);
                    res.add(ans);
                    j++;
                    k--;
                    while(j < k && nums[j] == nums[j-1]) j++;
                    while(j < k && nums[k] == nums[k+1]) k--;
                }// Since the array is sorted so if sum is less than 0, then increment value of j else decrement value of k
                else if(sum < 0){
                    j++;
                }
                else{
                    k--;
                }
            }
        }
        return res;
    }
}
