Binary Tree Level Order Traversal
---------------------------------
Time Complexity - O(n)
Space Complexity - O(n)
---------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
       List<List<Integer>> result = new ArrayList<>();
       if(root == null){return result;}
// Using BFS approach for Level order traversal using queue
       Queue<TreeNode> queue = new LinkedList<>();
       queue.offer(root);

       while(!queue.isEmpty()){
        int level = queue.size();
        List<Integer> ans = new ArrayList<>();
        for(int i=0;i<level;i++){
            TreeNode node = queue.poll();
            ans.add(node.val);
            if(node.left != null){queue.offer(node.left);}
            if(node.right != null){queue.offer(node.right);}
        }
        result.add(ans);
       }
       return result;
    }
    
}
