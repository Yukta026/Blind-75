Binary Tree Maximum Path Sum
----------------------------
Time Complexity - O(n)
Space Complexity - O(n)
----------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans;
    public int maxPathSum(TreeNode root) {
       ans = Integer.MIN_VALUE;
       dfs(root);
       return ans;
    }
    private int dfs(TreeNode root){
         if(root == null){
            return 0;
        }
        // Computing left and right nodes sum for each root node
       int left = Math.max(0,dfs(root.left));
       int right = Math.max(0,dfs(root.right));
        
        // Computing max sum for nodes traversed so far
        ans = Math.max(ans,root.val + left+right);
        return root.val + Math.max(left,right);
    }
}
