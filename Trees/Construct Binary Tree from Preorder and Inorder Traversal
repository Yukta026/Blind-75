Construct Binary Tree from Preorder and Inorder Traversal
---------------------------------------------------------
Time Complexity - O(n)
Space Complexity - O(n)
---------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    int preIndex = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
// Tracking indexes of nodes in inorder array
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return buildTreeHelper(preorder,inorder,0,inorder.length-1,map);
    }
    private TreeNode buildTreeHelper(int[] preorder,int[] inorder,int startInd,int endInd,Map<Integer,Integer> map){
        if(startInd > endInd){
            return null;
        }
// Finding left and right nodes of current node in preOrder array
        int rootVal = preorder[preIndex++];
        TreeNode root = new TreeNode(rootVal);
        int indIndex = map.get(rootVal);

        root.left = buildTreeHelper(preorder,inorder,startInd,indIndex-1,map);
        root.right = buildTreeHelper(preorder,inorder,indIndex+1,endInd,map);
        return root;
    }    
        
    
}
