Longest Repeating Character Replacement
---------------------------------------
Time Complexity - O(n)
Space Complexity - O(1)
---------------------------------------
class Solution {
    public int characterReplacement(String s, int k) {
        int left = 0;
        int[] count = new int[26];
        int maxLength = 0;
        int maxFreq = 0;
        for(int right =0;right<s.length();right++){
            char c = s.charAt(right);
// Keeping the character count in an array
            count[c-'A']++;
            maxFreq = Math.max(maxFreq,count[c-'A']);
// If window length has K more characters than the character at left pointer, shrink the window by pointing left to next character
            while((right-left+1)-maxFreq > k){
                count[s.charAt(left)-'A']--;
                left++;
            }
            maxLength = Math.max(maxLength,right-left+1);
        }
        return maxLength;
    }
}
