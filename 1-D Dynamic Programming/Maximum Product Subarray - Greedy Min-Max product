Maximum Product Subarray - Greedy Min-Max product
------------------------
Time Complexity - O(n)
Space Complexity - O(1)
------------------------
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int maxProd = nums[0];
        int currMax = nums[0];
        int currMin = nums[0];

        for(int i=1;i<n;i++){
            int temp = max(nums[i],nums[i]*currMax,nums[i]*currMin);
          // Update minimum product ending at current index
            currMin = min(nums[i],nums[i]*currMax,nums[i]*currMin);
            currMax = temp;
          // Update maximum product ending at current index
            maxProd = Math.max(maxProd,currMax);
        }
        return maxProd;

    }
    public int max(int num1,int num2,int num3){
        return Math.max(num1,Math.max(num2,num3));
    }
    public int min(int num1,int num2,int num3){
        return Math.min(num1,Math.min(num2,num3));
    }
}
