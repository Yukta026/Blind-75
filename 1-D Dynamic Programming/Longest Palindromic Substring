Longest Palindromic Substring
-----------------------------
Time Complexity - O(n^2)
Space Complexity - O(n)
-----------------------------
class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s.length() == 0){return "";}
        int resLen = 0;
        int res = 0;
        for(int i=0;i<s.length();i++){
            // Check for even palindrome
            int left = i;
            int right = i;
            while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
                if(resLen < right-left+1){
                    resLen = right-left+1;
                    res= left;
                    
                }
                left--;
                right++;
            }
            
            left = i;
            right = i+1;
            // Check for odd palindrome
            while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
                 if(resLen < right-left+1){
                    resLen = right-left+1;
                    res= left;
                    
                }
                    left--;
                    right++;
                
            }
            
        }
        StringBuilder ans = new StringBuilder();
        return ans.append(s,res,res+resLen).toString();
    }
}
