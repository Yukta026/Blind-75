House Robber
-----------------------
Time Complexity - O(N)
Space Complexity - O(1)
-----------------------
class Solution {
    public int rob(int[] nums) {
        if(nums.length == 1){return nums[0];}
        if(nums.length == 2){return Math.max(nums[0],nums[1]);}
// For first house only in consideration, rob it
        int dp0 = nums[0];
// For two houses, rob the one with maximum amount
        int dp1 = Math.max(dp0,nums[1]);
// Space optimized memoization
        for(int i=2;i<nums.length;i++){
// Recurrence relation dp[i] = Math.max(dp[i-1], nums[i]+dp[i-2])
            int dpn = Math.max(dp1,nums[i]+dp0);
            dp0 = dp1;
            dp1 = dpn;
        }
        return dp1;
    }
}
