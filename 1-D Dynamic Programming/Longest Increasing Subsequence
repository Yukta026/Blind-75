Longest Increasing Subsequence
------------------------------
Time Complexity - O(n^2)
Space Complexity - O(n)
------------------------------
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp,1);
        int maxLen = 0;

        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
// If previous element is smaller than current element then increasing subsequence found
                if(nums[j] < nums[i]){
                    dp[i] = Math.max(dp[i],dp[j]+1);
                }
            }
            maxLen = Math.max(maxLen,dp[i]);
        }
        return maxLen;
    }
}
