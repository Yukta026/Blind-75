Alien Dictionary
-------------------------------------------------------
Time Complexity - O(N+V+E)
Space Complexity - O(V+E)

where N = total number of characters in strings
V = number of unique characters
E = number of edges (ordering rules between characters)
-------------------------------------------------------
class Solution {
    public String foreignDictionary(String[] words) {
      // string matching
      Map<Character,Integer> inDegree = new HashMap<>();
      for(String str : words){
        for(char c : str.toCharArray()){
            inDegree.putIfAbsent(c,0);
        }
      }
      Map<Character,Set<Character>> graph = new HashMap<>();

      for(int i=1;i<words.length;i++){
        String w1 = words[i-1];
        String w2 = words[i];

        if(w1.length() > w2.length() && w1.startsWith(w2)){
            return "";
        }

        for(int j=0;j < Math.min(w1.length(),w2.length());j++){
            char c1 = w1.charAt(j);
            char c2 = w2.charAt(j);
            if(c1 != c2){
                graph.putIfAbsent(c1,new HashSet<>());
                if(graph.get(c1).add(c2)){
                    inDegree.put(c2,inDegree.get(c2)+1);
                }
                break;
            }
        }
      }
      
      // BFS using Karn's Algorithm
      Queue<Character> q = new LinkedList<>();

      for(char ch : inDegree.keySet()){
        if(inDegree.get(ch) == 0){
            q.add(ch);
        }
      }
    
      StringBuilder str = new StringBuilder();
      while(!q.isEmpty()){
        
        char ans = q.poll();
        str.append(ans);

        if(graph.containsKey(ans)){
            for(char nei : graph.get(ans)){
                inDegree.put(nei, inDegree.get(nei) -1);
                if(inDegree.get(nei) == 0){
                    q.add(nei);
                }
            }
        }


      }
      if(str.length() != inDegree.size()) {return "";}
      return str.toString();
    }
}
