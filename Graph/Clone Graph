Clone Graph
--------------------------
Time Complexity - O(N+E)
Space Complexity - O(N+E)
where N - number of nodes
E - number of edges
--------------------------
/*
Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
     if(node == null){ return null;}
     Map<Node, Node> map = new HashMap<>();
     Queue<Node> q = new LinkedList<>();
     Node clone = new Node(node.val);
     map.put(node,clone);
     q.offer(node);
     while(!q.isEmpty()){
        Node curr = q.poll();
        for(Node neighbor : curr.neighbors){
            if(!map.containsKey(neighbor)){
                // neighbor not cloned yet -> create clone
                map.put(neighbor,new Node(neighbor.val));
                q.offer(neighbor); // add neoghbor to queue for BFS
            }
            // add the cloned neighbor to current node's neighbor
            map.get(curr).neighbors.add(map.get(neighbor));
        }
        
     }
     return map.get(node);
    }
}
