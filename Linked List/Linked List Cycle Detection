Linked List Cycle Detection
---------------------------
Time Complexity - O(n)
Space Complexity - O(1)
---------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public boolean hasCycle(ListNode head) {
       if(head == null){
        return false;
       } 
// Creating slow and fast pointers
       ListNode slow = head;
       ListNode fast = head;
       while(slow.next != null && fast.next.next != null){
        slow = slow.next;
        fast = fast.next.next;
// If slow and fast pointers meet, cycle is present
        if(slow.val == fast.val){
            return true;
        }
       }
    return false;
    }
}
