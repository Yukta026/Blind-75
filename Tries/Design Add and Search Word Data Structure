Design Add and Search Word Data Structure
-----------------------------------------
addWord → 
Time Complexity - O(L), 
Space Complexity - O(L)

search →
Time Complexity - 
Best case: O(L)

Average case with '.': O(26 * L)

Worst case with '.': O(26^L)

Space Complexity - O(L) (recursion depth)
class TrieNode {
    TrieNode[] children;
    boolean isEndOfWord;

    public TrieNode() {
        children = new TrieNode[26];
        isEndOfWord = false;
    }
}
class WordDictionary {

    private TrieNode root;
    public WordDictionary() {
        root = new TrieNode();
    }

    public void addWord(String word) {
        TrieNode node = root;
        for(char ch : word.toCharArray()){
// Convert char index to integer
            int ind = ch - 'a';
            if(node.children[ind] == null){
                node.children[ind] = new TrieNode();
            }
            node = node.children[ind];
        }
        node.isEndOfWord = true;
    }

    public boolean search(String word) {
        TrieNode node = root;
        return searchHelper(word,0,node);
        
    }
    public boolean searchHelper(String word,int index,TrieNode node){
        if(index == word.length()){
            return node.isEndOfWord;
        }
        char ch = word.charAt(index);
// If '.' is parsed then recursively look for all non-null node paths
        if(ch != '.'){
            int ind = ch - 'a';
            if(node.children[ind] == null){
                return false;
            }
            return searchHelper(word,index+1,node.children[ind]);
        }else{
            for(TrieNode child : node.children){
                if(child != null && searchHelper(word,index+1,child)){
                    return true;
                }
            }
            return false;
        }

    }
}
